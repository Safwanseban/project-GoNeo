// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Safwanseban/voixme-project/internal/usecases (interfaces: UsecasesCompany)

// Package mockdata is a generated GoMock package.
package mockdata

import (
	reflect "reflect"

	types "github.com/Safwanseban/voixme-project/internal/types"
	gomock "github.com/golang/mock/gomock"
)

// MockUsecasesCompany is a mock of UsecasesCompany interface.
type MockUsecasesCompany struct {
	ctrl     *gomock.Controller
	recorder *MockUsecasesCompanyMockRecorder
}

// MockUsecasesCompanyMockRecorder is the mock recorder for MockUsecasesCompany.
type MockUsecasesCompanyMockRecorder struct {
	mock *MockUsecasesCompany
}

// NewMockUsecasesCompany creates a new mock instance.
func NewMockUsecasesCompany(ctrl *gomock.Controller) *MockUsecasesCompany {
	mock := &MockUsecasesCompany{ctrl: ctrl}
	mock.recorder = &MockUsecasesCompanyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecasesCompany) EXPECT() *MockUsecasesCompanyMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockUsecasesCompany) CreateProduct(arg0 *types.OfferCompany) (*uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", arg0)
	ret0, _ := ret[0].(*uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockUsecasesCompanyMockRecorder) CreateProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockUsecasesCompany)(nil).CreateProduct), arg0)
}

// FetchAndAppend mocks base method.
func (m *MockUsecasesCompany) FetchAndAppend() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FetchAndAppend")
}

// FetchAndAppend indicates an expected call of FetchAndAppend.
func (mr *MockUsecasesCompanyMockRecorder) FetchAndAppend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAndAppend", reflect.TypeOf((*MockUsecasesCompany)(nil).FetchAndAppend))
}

// ShowOfferCompany mocks base method.
func (m *MockUsecasesCompany) ShowOfferCompany(arg0 *types.OfferCompany) ([]types.OfferCompany, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowOfferCompany", arg0)
	ret0, _ := ret[0].([]types.OfferCompany)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowOfferCompany indicates an expected call of ShowOfferCompany.
func (mr *MockUsecasesCompanyMockRecorder) ShowOfferCompany(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowOfferCompany", reflect.TypeOf((*MockUsecasesCompany)(nil).ShowOfferCompany), arg0)
}
